Slip 4
Q1: Write a program to implement Hangman game using python.
import random
words=['python','algorithm','hangman','computer']
word=random.choice(words)
guessed=set(); tries=6
while tries>0:
disp=''.join(c if c in guessed else '_' for c in word)
print(disp)
if '_' not in disp:
print('You won!'); break
ch=input('Letter: ').lower()
if ch in word: guessed.add(ch)
else: tries-=1; print('Tries left:',tries)
if tries==0: print('Lost. Word:',word)


Q2: Write a Python program to implement Breadth First Search algorithm. [Initial node=1,Goal node=8]
from collections import deque
graph={1:[2,3],2:[4,5],3:[6],4:[],5:[],6:[7,8],7:[],8:[]}
def bfs(graph,start,goal):
visited={start}; q=deque([start]); parent={start:None}
while q:
u=q.popleft()
if u==goal:
path=[]; cur=u
while cur is not None:
path.append(cur); cur=parent[cur]
print('BFS path:',list(reversed(path))); return
for v in graph.get(u,[]):
if v not in visited:
visited.add(v); parent[v]=u; q.append(v)
print('Goal not reachable')
bfs(graph,1,8)
