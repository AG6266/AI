Slip 1
Q1: Python program that demonstrates the hill climbing algorithm to find the maximum of a mathematical function
(e.g., f(x) = -x^2 + 4x)


import random
def hill_climb(function, x_start, step_size, max_iter):
x = x_start
for _ in range(max_iter):
new_x = x + random.uniform(-step_size, step_size)
if function(new_x) > function(x):
x = new_x
return x, function(x)
f = lambda x: -x**2 + 4*x
best_x, best_y = hill_climb(f, random.uniform(0, 4), 0.1, 1000)
print(f"Best x: {best_x:.4f}, f(x): {best_y:.4f}")


Q2: Write a Python program to implement Depth First Search algorithm. Refer the following graph as an Input for
the program. [Initial node=1,Goal node=8]
graph = {
1: [2, 3],
2: [4, 5],
3: [6],
4: [], 5: [], 6: [7, 8], 7: [], 8: []
}
def dfs(graph, start, goal):
visited = set()
path = []
def _dfs(u):
visited.add(u)
path.append(u)
if u == goal:
return True
for v in graph.get(u, []):
if v not in visited:
if _dfs(v):
return True
path.pop()
return False
found = _dfs(start)
if found:
print('DFS path to goal:', path)
else:
print('Goal not reachable')
dfs(graph, 1, 8)
